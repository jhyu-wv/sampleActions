name: RSS to GitHub Issues Sync

# 스케줄링 설정
on:
  schedule:
    # 매 5분 마다
    - cron: '5 * * * *'
  
  # 수동 실행 가능하도록 설정
  workflow_dispatch:
  
  # 코드 변경 시 테스트 실행
  push:
    branches: [main]
    paths: 
      - '.github/workflows/rss-sync.yml'
      - 'scripts/**'

# 환경 변수 설정
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  RSS_FEED_URL: ${{ vars.RSS_FEED_URL }}
  TARGET_REPO: ${{ github.repository }}

jobs:
  sync-rss:
    runs-on: ubuntu-latest
    
    # 권한 설정
    permissions:
      contents: write  # 상태 파일 커밋용
      issues: write    # 이슈 생성/수정용
      
    steps:
      # 1. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 상태 파일 커밋을 위해 토큰 사용
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # 2. Python 환경 설정
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      # 3. 의존성 설치
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          
      # 4. RSS 동기화 스크립트 실행  
      - name: Run RSS sync
        run: |
          python scripts/rss_sync.py
        env:
          # 추가 환경 변수들
          RSS_FEED_URL: ${{ vars.RSS_FEED_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_REPO: ${{ github.repository }}
          STATE_FILE_PATH: 'data/rss_state.json'
          
      # 5. 상태 파일 변경사항 커밋
      - name: Commit state changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 변경사항이 있는 경우에만 커밋
          if [[ -n $(git status --porcelain) ]]; then
            git add data/rss_state.json
            git commit -m "Update RSS sync state [skip ci]"
            git push
          else
            echo "No changes to commit"
          fi
          
      # 6. 동기화 결과 알림 (선택사항)
      - name: Notify results
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'RSS Sync Failed',
              body: `RSS 동기화가 실패했습니다.\n\n워크플로우: ${context.workflow}\n실행 시간: ${new Date().toISOString()}`,
              labels: ['bug', 'automation']
            })

  # 정리 작업 (선택사항)
  cleanup:
    runs-on: ubuntu-latest
    needs: sync-rss
    if: always()
    
    steps:
      - name: Clean up old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'rss-sync.yml',
              per_page: 100
            });
            
            // 최근 10개를 제외하고 나머지 삭제
            const toDelete = runs.data.workflow_runs.slice(10);
            
            for (const run of toDelete) {
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              } catch (error) {
                console.log(`Failed to delete run ${run.id}: ${error.message}`);
              }
            }